package Speech::Recognition::Whisper::Client::Impl 0.01;
# DO NOT EDIT! This is an autogenerated file.

use 5.020;
use Moo 2;
use experimental 'signatures';
use PerlX::Maybe;
use Carp 'croak';

# These should go into a ::Role
use YAML::PP;
use Mojo::UserAgent;
use Mojo::URL;
use URI::Template;
use Mojo::JSON 'encode_json', 'decode_json';
use OpenAPI::Modern;

use Future::Mojo;
use Future::Queue;

our $SCHEMA_VERSION = "0.1.0";

use Speech::Recognition::Whisper::Error;
use Speech::Recognition::Whisper::LoadModel;
use Speech::Recognition::Whisper::SuccessfulLoad;
use Speech::Recognition::Whisper::TranscribeFile;
use Speech::Recognition::Whisper::Transcription;

=encoding utf8

=head1 SYNOPSIS

  my $client = Speech::Recognition::Whisper::Client::Impl->new(
      schema_file => '...',
  );

=head1 PROPERTIES

=head2 B<< schema_file >>

The OpenAPI schema file we use for validation

=head2 B<< schema >>

The OpenAPI schema data structure we use for validation. If not given,
we will create one using the C<schema_file> parameter.

=head2 B<< openapi >>

The L<OpenAPI::Modern> object we use for validation. If not given,
we will create one using the C<schema> parameter.

=head2 B<< ua >>

The L<Mojo::UserAgent> to use

=head2 B<< server >>

The server to access

=cut

has 'schema_file' => (
    is => 'ro',
);

has 'schema' => (
    is => 'lazy',
    default => sub {
        if( my $fn = $_[0]->schema_file ) {
            YAML::PP->new( boolean => 'JSON::PP' )->load_file( $fn );
        }
    },
);

has 'validate_requests' => (
    is => 'rw',
    default => 1,
);

has 'validate_responses' => (
    is => 'rw',
    default => 1,
);

has 'openapi' => (
    is => 'lazy',
    default => sub {
        if( my $schema = $_[0]->schema ) {
            OpenAPI::Modern->new( openapi_schema => $schema, openapi_uri => '' )
        }
    },
);

# The HTTP stuff should go into a ::Role I guess
has 'ua' => (
    is => 'lazy',
    default => sub { Mojo::UserAgent->new },
);

has 'server' => (
    is => 'lazy',
    default => sub { 'http://localhost:8080/' },
);

=head1 METHODS

=head2 C<< build_inference_request >>

Build an HTTP request as L<Mojo::Request> object. For the parameters see below.

=head2 C<< inference >>

  my $res = $client->inference()->get;

Perform inference on a WAV file


=head3 Options

=over 4

=item C<< name >>

=item C<< response_format >>

=item C<< temperature >>

Temperature

=item C<< temperature_inc >>

=back

Returns a L<< Speech::Recognition::Whisper::Transcription >> on success.
Returns a L<< Speech::Recognition::Whisper::Error >> otherwise.

=cut

sub build_inference_request( $self, %options ) {
    my $method = 'POST';
    my $path = '/inference';
    my $url = Mojo::URL->new( $self->server . $path );

    my $request = Speech::Recognition::Whisper::TranscribeFile->new( \%options )->as_hash;
    my $tx = $self->ua->build_tx(
        $method => $url,
        {
            'Accept' => 'application/json',
            "Content-Type" => 'multipart/form-data',
        }
        => form => $request,
    );

    # validate our request while developing
    if(        $self->validate_requests
        and my $openapi = $self->openapi ) {
        my $results = $openapi->validate_request($tx->req);
        if( $results->{error}) {
            say $results;
            say $tx->req->to_string;
        };
    };

    return $tx
}


sub inference( $self, %options ) {
    my $tx = $self->_build_inference_request(%options);


    my $res = Future::Mojo->new();

    my $r1 = Future::Mojo->new();
    $r1->then( sub( $tx ) {
        my $resp = $tx->res;
        # Should we validate using OpenAPI::Modern here?!
        if( $resp->code == 200 ) {
            # Successful response
            my $ct = $resp->headers->content_type;
            $ct =~ s/;\s+.*//;
            if( $ct eq 'application/json' ) {
                my $payload = $resp->json();
                if(     $self->validate_responses
                    and my $openapi = $self->openapi ) {
                    my $results = $openapi->validate_response($payload, { request => $tx->req });
                    if( $results->{error}) {
                        say $results;
                        say $tx->res->to_string;
                    };
                };
                $res->done(
                    Speech::Recognition::Whisper::Transcription->new($payload),

                );
            } else {
                # Unknown/unhandled content type
                $res->fail( sprintf("unknown_unhandled content type '%s'", $resp->content_type), $resp );
            }
        } elsif( $resp->code  ) {
            # Error response
            my $ct = $resp->headers->content_type;
            $ct =~ s/;\s+.*//;
            if( $ct eq 'application/json' ) {
                my $payload = $resp->json();
                if(     $self->validate_responses
                    and my $openapi = $self->openapi ) {
                    my $results = $openapi->validate_response($payload, { request => $tx->req });
                    if( $results->{error}) {
                        say $results;
                        say $tx->res->to_string;
                    };
                };
                $res->done(
                    Speech::Recognition::Whisper::Error->new($payload),

                );
            } else {
                # Unknown/unhandled content type
                $res->fail( sprintf("unknown_unhandled content type '%s'", $resp->content_type), $resp );
            }
        } else {
            # An unknown/unhandled response, likely an error
            $res->fail( sprintf( "unknown_unhandled code %d: %s", $resp->code, $resp->body ), $resp);
        }
    })->retain;

    # Start our transaction
    $tx = $self->ua->start_p($tx)->then(sub($tx) {
        $r1->resolve( $tx );
        undef $r1;
    })->catch(sub($err) {
        $r1->fail( $err => $tx );
        undef $r1;
    });

    return $res
}

=head2 C<< build_load_request >>

Build an HTTP request as L<Mojo::Request> object. For the parameters see below.

=head2 C<< load >>

  my $res = $client->load()->get;

Load a model


=head3 Options

=over 4

=item C<< model >>

Model file

=item C<< response_format >>

Format of the response

=item C<< temperature >>

Temperature

=item C<< temperature_inc >>

=back

Returns a L<< Speech::Recognition::Whisper::SuccessfulLoad >> on success.
Returns a L<< Speech::Recognition::Whisper::Error >> otherwise.

=cut

sub build_load_request( $self, %options ) {
    my $method = 'POST';
    my $path = '/load';
    my $url = Mojo::URL->new( $self->server . $path );

    my $request = Speech::Recognition::Whisper::LoadModel->new( \%options )->as_hash;
    my $tx = $self->ua->build_tx(
        $method => $url,
        {
            'Accept' => 'application/json,application/text',
            "Content-Type" => 'multipart/form-data',
        }
        => form => $request,
    );

    # validate our request while developing
    if(        $self->validate_requests
        and my $openapi = $self->openapi ) {
        my $results = $openapi->validate_request($tx->req);
        if( $results->{error}) {
            say $results;
            say $tx->req->to_string;
        };
    };

    return $tx
}


sub load( $self, %options ) {
    my $tx = $self->_build_load_request(%options);


    my $res = Future::Mojo->new();

    my $r1 = Future::Mojo->new();
    $r1->then( sub( $tx ) {
        my $resp = $tx->res;
        # Should we validate using OpenAPI::Modern here?!
        if( $resp->code == 200 ) {
            # Successful response
            my $ct = $resp->headers->content_type;
            $ct =~ s/;\s+.*//;
            if( $ct eq 'application/text' ) {
                my $payload = $resp->body();
                if(     $self->validate_responses
                    and my $openapi = $self->openapi ) {
                    my $results = $openapi->validate_response($payload, { request => $tx->req });
                    if( $results->{error}) {
                        say $results;
                        say $tx->res->to_string;
                    };
                };
                $res->done(
                    Speech::Recognition::Whisper::SuccessfulLoad->new($payload),

                );
            } else {
                # Unknown/unhandled content type
                $res->fail( sprintf("unknown_unhandled content type '%s'", $resp->content_type), $resp );
            }
        } elsif( $resp->code  ) {
            # Error response
            my $ct = $resp->headers->content_type;
            $ct =~ s/;\s+.*//;
            if( $ct eq 'application/json' ) {
                my $payload = $resp->json();
                if(     $self->validate_responses
                    and my $openapi = $self->openapi ) {
                    my $results = $openapi->validate_response($payload, { request => $tx->req });
                    if( $results->{error}) {
                        say $results;
                        say $tx->res->to_string;
                    };
                };
                $res->done(
                    Speech::Recognition::Whisper::Error->new($payload),

                );
            } else {
                # Unknown/unhandled content type
                $res->fail( sprintf("unknown_unhandled content type '%s'", $resp->content_type), $resp );
            }
        } else {
            # An unknown/unhandled response, likely an error
            $res->fail( sprintf( "unknown_unhandled code %d: %s", $resp->code, $resp->body ), $resp);
        }
    })->retain;

    # Start our transaction
    $tx = $self->ua->start_p($tx)->then(sub($tx) {
        $r1->resolve( $tx );
        undef $r1;
    })->catch(sub($err) {
        $r1->fail( $err => $tx );
        undef $r1;
    });

    return $res
}


1;
