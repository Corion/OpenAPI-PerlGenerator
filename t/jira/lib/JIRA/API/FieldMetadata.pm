package JIRA::API::FieldMetadata 0.01;
# DO NOT EDIT! This is an autogenerated file.
use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int Object ArrayRef);
use MooX::TypeTiny;

=head1 NAME

JIRA::API::FieldMetadata -

=head1 SYNOPSIS

  my $obj = JIRA::API::FieldMetadata->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< allowedValues >>

The list of values allowed in the field.

=cut

has 'allowedValues' => (
    is       => 'ro',
    isa      => ArrayRef[],
);

=head2 C<< autoCompleteUrl >>

The URL that can be used to automatically complete the field.

=cut

has 'autoCompleteUrl' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< configuration >>

The configuration properties.

=cut

has 'configuration' => (
    is       => 'ro',
    isa      => Object,
);

=head2 C<< defaultValue >>

The default value of the field.

=cut

has 'defaultValue' => (
    is       => 'ro',
);

=head2 C<< hasDefaultValue >>

Whether the field has a default value.

=cut

has 'hasDefaultValue' => (
    is       => 'ro',
);

=head2 C<< key >>

The key of the field.

=cut

has 'key' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< name >>

The name of the field.

=cut

has 'name' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< operations >>

The list of operations that can be performed on the field.

=cut

has 'operations' => (
    is       => 'ro',
    isa      => ArrayRef[Str],
    required => 1,
);

=head2 C<< required >>

Whether the field is required.

=cut

has 'required' => (
    is       => 'ro',
    required => 1,
);

=head2 C<< schema >>

The data type of the field.

=cut

has 'schema' => (
    is       => 'ro',
    required => 1,
);


1;
