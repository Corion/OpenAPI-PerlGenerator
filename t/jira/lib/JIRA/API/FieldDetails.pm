package JIRA::API::FieldDetails 0.01;
# DO NOT EDIT! This is an autogenerated file.
use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int Object ArrayRef);
use MooX::TypeTiny;

=head1 NAME

JIRA::API::FieldDetails -

=head1 SYNOPSIS

  my $obj = JIRA::API::FieldDetails->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< clauseNames >>

The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).

=cut

has 'clauseNames' => (
    is       => 'ro',
    isa      => ArrayRef[Str],
);

=head2 C<< custom >>

Whether the field is a custom field.

=cut

has 'custom' => (
    is       => 'ro',
);

=head2 C<< id >>

The ID of the field.

=cut

has 'id' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< key >>

The key of the field.

=cut

has 'key' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< name >>

The name of the field.

=cut

has 'name' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< navigable >>

Whether the field can be used as a column on the issue navigator.

=cut

has 'navigable' => (
    is       => 'ro',
);

=head2 C<< orderable >>

Whether the content of the field can be used to order lists.

=cut

has 'orderable' => (
    is       => 'ro',
);

=head2 C<< schema >>

The data schema for the field.

=cut

has 'schema' => (
    is       => 'ro',
);

=head2 C<< scope >>

The scope of the field.

=cut

has 'scope' => (
    is       => 'ro',
);

=head2 C<< searchable >>

Whether the content of the field can be searched.

=cut

has 'searchable' => (
    is       => 'ro',
);


1;
