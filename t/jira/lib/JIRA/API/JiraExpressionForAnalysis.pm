package JIRA::API::JiraExpressionForAnalysis 0.01;
# DO NOT EDIT! This is an autogenerated file.

use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

=encoding utf8

=head1 NAME

JIRA::API::JiraExpressionForAnalysis -

=head1 SYNOPSIS

  my $obj = JIRA::API::JiraExpressionForAnalysis->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< contextVariables >>

Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.

=cut

has 'contextVariables' => (
    is       => 'ro',
    isa      => HashRef,
);

=head2 C<< expressions >>

The list of Jira expressions to analyse.

=cut

has 'expressions' => (
    is       => 'ro',
    isa      => ArrayRef[Str],
    required => 1,
);


1;
