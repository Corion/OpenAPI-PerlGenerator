package JIRA::API::ProjectRole 0.01;
# DO NOT EDIT! This is an autogenerated file.

use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

=encoding utf8

=head1 NAME

JIRA::API::ProjectRole -

=head1 SYNOPSIS

  my $obj = JIRA::API::ProjectRole->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< actors >>

The list of users who act in this role.

=cut

has 'actors' => (
    is       => 'ro',
    isa      => ArrayRef[HashRef],
);

=head2 C<< admin >>

Whether this role is the admin role for the project.

=cut

has 'admin' => (
    is       => 'ro',
);

=head2 C<< currentUserRole >>

Whether the calling user is part of this role.

=cut

has 'currentUserRole' => (
    is       => 'ro',
);

=head2 C<< default >>

Whether this role is the default role for the project

=cut

has 'default' => (
    is       => 'ro',
);

=head2 C<< description >>

The description of the project role.

=cut

has 'description' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< id >>

The ID of the project role.

=cut

has 'id' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< name >>

The name of the project role.

=cut

has 'name' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< roleConfigurable >>

Whether the roles are configurable for this project.

=cut

has 'roleConfigurable' => (
    is       => 'ro',
);

=head2 C<< scope >>

The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).

=cut

has 'scope' => (
    is       => 'ro',
);

=head2 C<< self >>

The URL the project role details.

=cut

has 'self' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< translatedName >>

The translated name of the project role.

=cut

has 'translatedName' => (
    is       => 'ro',
    isa      => Str,
);


1;
