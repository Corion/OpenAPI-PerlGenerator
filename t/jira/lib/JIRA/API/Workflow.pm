package JIRA::API::Workflow 0.01;
# DO NOT EDIT! This is an autogenerated file.

use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

=encoding utf8

=head1 NAME

JIRA::API::Workflow -

=head1 SYNOPSIS

  my $obj = JIRA::API::Workflow->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< created >>

The creation date of the workflow.

=cut

has 'created' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< description >>

The description of the workflow.

=cut

has 'description' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< hasDraftWorkflow >>

Whether the workflow has a draft version.

=cut

has 'hasDraftWorkflow' => (
    is       => 'ro',
);

=head2 C<< id >>

Properties that identify a published workflow.

=cut

has 'id' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< isDefault >>

Whether this is the default workflow.

=cut

has 'isDefault' => (
    is       => 'ro',
);

=head2 C<< operations >>

Operations allowed on a workflow

=cut

has 'operations' => (
    is       => 'ro',
    isa      => HashRef,
);

=head2 C<< projects >>

The projects the workflow is assigned to, through workflow schemes.

=cut

has 'projects' => (
    is       => 'ro',
    isa      => ArrayRef[HashRef],
);

=head2 C<< schemes >>

The workflow schemes the workflow is assigned to.

=cut

has 'schemes' => (
    is       => 'ro',
    isa      => ArrayRef[HashRef],
);

=head2 C<< statuses >>

The statuses of the workflow.

=cut

has 'statuses' => (
    is       => 'ro',
    isa      => ArrayRef[HashRef],
);

=head2 C<< transitions >>

The transitions of the workflow.

=cut

has 'transitions' => (
    is       => 'ro',
    isa      => ArrayRef[HashRef],
);

=head2 C<< updated >>

The last edited date of the workflow.

=cut

has 'updated' => (
    is       => 'ro',
    isa      => Str,
);


1;
