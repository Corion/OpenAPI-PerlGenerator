package AI::OpenAI::ChatCompletionRequestMessage 0.01;
# DO NOT EDIT! This is an autogenerated file.
use 5.020;
use experimental 'signatures';
use stable 'postderef';
use Carp 'croak';

=encoding utf8

=head1 NAME

AI::OpenAI::ChatCompletionRequestMessage - Factory class

=head1 SYNOPSIS

  my $obj = AI::OpenAI::ChatCompletionRequestMessage->new($args);
  ...

This is a factory class that returns one of the following types
based on the C<< role >> field:

C<< assistant >> - L<< AI::OpenAI::ChatCompletionRequestAssistantMessage >>

C<< function >> - L<< AI::OpenAI::ChatCompletionRequestFunctionMessage >>

C<< system >> - L<< AI::OpenAI::ChatCompletionRequestSystemMessage >>

C<< tool >> - L<< AI::OpenAI::ChatCompletionRequestToolMessage >>

C<< user >> - L<< AI::OpenAI::ChatCompletionRequestUserMessage >>


=cut

use AI::OpenAI::ChatCompletionRequestAssistantMessage;
use AI::OpenAI::ChatCompletionRequestFunctionMessage;
use AI::OpenAI::ChatCompletionRequestSystemMessage;
use AI::OpenAI::ChatCompletionRequestToolMessage;
use AI::OpenAI::ChatCompletionRequestUserMessage;


our %classes = (
    'assistant' => 'AI::OpenAI::ChatCompletionRequestAssistantMessage',
    'function' => 'AI::OpenAI::ChatCompletionRequestFunctionMessage',
    'system' => 'AI::OpenAI::ChatCompletionRequestSystemMessage',
    'tool' => 'AI::OpenAI::ChatCompletionRequestToolMessage',
    'user' => 'AI::OpenAI::ChatCompletionRequestUserMessage',
);

sub new( $class, $data ) {
    if( ! exists $data->{ 'role' } ) {
        croak "Need a 'role' field";
    };
    my $type = $data->{ 'role' };
    croak "Unknown type '$type' in field 'role'"
        unless exists $classes{ $type };

    return $classes{ $type }->new( $data );
}

1;
