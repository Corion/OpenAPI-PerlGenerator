package AI::OpenAI::RunObject 0.01;
# DO NOT EDIT! This is an autogenerated file.

use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

=encoding utf8

=head1 NAME

AI::OpenAI::RunObject -

=head1 SYNOPSIS

  my $obj = AI::OpenAI::RunObject->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< assistant_id >>

The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.

=cut

has 'assistant_id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< cancelled_at >>

The Unix timestamp (in seconds) for when the run was cancelled.

=cut

has 'cancelled_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< completed_at >>

The Unix timestamp (in seconds) for when the run was completed.

=cut

has 'completed_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< created_at >>

The Unix timestamp (in seconds) for when the run was created.

=cut

has 'created_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< expires_at >>

The Unix timestamp (in seconds) for when the run will expire.

=cut

has 'expires_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< failed_at >>

The Unix timestamp (in seconds) for when the run failed.

=cut

has 'failed_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< id >>

The identifier, which can be referenced in API endpoints.

=cut

has 'id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< incomplete_details >>

Details on why the run is incomplete. Will be `null` if the run is not incomplete.

=cut

has 'incomplete_details' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< instructions >>

The instructions that the [assistant](/docs/api-reference/assistants) used for this run.

=cut

has 'instructions' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< last_error >>

The last error associated with this run. Will be `null` if there are no errors.

=cut

has 'last_error' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< max_completion_tokens >>

The maximum number of completion tokens specified to have been used over the course of the run.

=cut

has 'max_completion_tokens' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< max_prompt_tokens >>

The maximum number of prompt tokens specified to have been used over the course of the run.

=cut

has 'max_prompt_tokens' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< metadata >>

Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.

=cut

has 'metadata' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< model >>

The model that the [assistant](/docs/api-reference/assistants) used for this run.

=cut

has 'model' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< object >>

The object type, which is always `thread.run`.

=cut

has 'object' => (
    is       => 'ro',
    isa      => Enum[
        "thread.run",
    ],
    required => 1,
);

=head2 C<< required_action >>

Details on the action required to continue the run. Will be `null` if no action is required.

=cut

has 'required_action' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< response_format >>

Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4 Turbo](/docs/models/gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.

Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.

=cut

has 'response_format' => (
    is       => 'ro',
    required => 1,
);

=head2 C<< started_at >>

The Unix timestamp (in seconds) for when the run was started.

=cut

has 'started_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< status >>

The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.

=cut

has 'status' => (
    is       => 'ro',
    isa      => Enum[
        "queued",
        "in_progress",
        "requires_action",
        "cancelling",
        "cancelled",
        "failed",
        "completed",
        "incomplete",
        "expired",
    ],
    required => 1,
);

=head2 C<< temperature >>

The sampling temperature used for this run. If not set, defaults to 1.

=cut

has 'temperature' => (
    is       => 'ro',
    isa      => Num,
);

=head2 C<< thread_id >>

The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.

=cut

has 'thread_id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< tool_choice >>

Controls which (if any) tool is called by the model.
`none` means the model will not call any tools and instead generates a message.
`auto` is the default value and means the model can pick between generating a message or calling one or more tools.
`required` means the model must call one or more tools before responding to the user.
Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.

=cut

has 'tool_choice' => (
    is       => 'ro',
    required => 1,
);

=head2 C<< tools >>

The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.

=cut

has 'tools' => (
    is       => 'ro',
    isa      => ArrayRef[],
    required => 1,
);

=head2 C<< top_p >>

The nucleus sampling value used for this run. If not set, defaults to 1.

=cut

has 'top_p' => (
    is       => 'ro',
    isa      => Num,
);

=head2 C<< truncation_strategy >>

Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.

=cut

has 'truncation_strategy' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< usage >>

Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).

=cut

has 'usage' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);


1;
