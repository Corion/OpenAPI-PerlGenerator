package AI::OpenAI::VectorStoreObject 0.01;
# DO NOT EDIT! This is an autogenerated file.

use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

use namespace::clean;

=encoding utf8

=head1 NAME

AI::OpenAI::VectorStoreObject -

=head1 SYNOPSIS

  my $obj = AI::OpenAI::VectorStoreObject->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< created_at >>

The Unix timestamp (in seconds) for when the vector store was created.

=cut

has 'created_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< expires_after >>

The expiration policy for a vector store.

=cut

has 'expires_after' => (
    is       => 'ro',
    isa      => HashRef,
);

=head2 C<< expires_at >>

The Unix timestamp (in seconds) for when the vector store will expire.

=cut

has 'expires_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< file_counts >>

=cut

has 'file_counts' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< id >>

The identifier, which can be referenced in API endpoints.

=cut

has 'id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< last_active_at >>

The Unix timestamp (in seconds) for when the vector store was last active.

=cut

has 'last_active_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< metadata >>

Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.

=cut

has 'metadata' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< name >>

The name of the vector store.

=cut

has 'name' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< object >>

The object type, which is always `vector_store`.

=cut

has 'object' => (
    is       => 'ro',
    isa      => Enum[
        "vector_store",
    ],
    required => 1,
);

=head2 C<< status >>

The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.

=cut

has 'status' => (
    is       => 'ro',
    isa      => Enum[
        "expired",
        "in_progress",
        "completed",
    ],
    required => 1,
);

=head2 C<< usage_bytes >>

The total number of bytes used by the files in the vector store.

=cut

has 'usage_bytes' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);


1;
