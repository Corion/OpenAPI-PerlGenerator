package AI::OpenAI::FineTuningJob 0.01;
# DO NOT EDIT! This is an autogenerated file.
use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

=head1 NAME

AI::OpenAI::FineTuningJob -

=head1 SYNOPSIS

  my $obj = AI::OpenAI::FineTuningJob->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< created_at >>

The Unix timestamp (in seconds) for when the fine-tuning job was created.

=cut

has 'created_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< error >>

For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.

=cut

has 'error' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< estimated_finish >>

The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.

=cut

has 'estimated_finish' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< fine_tuned_model >>

The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.

=cut

has 'fine_tuned_model' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< finished_at >>

The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.

=cut

has 'finished_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< hyperparameters >>

The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.

=cut

has 'hyperparameters' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< id >>

The object identifier, which can be referenced in the API endpoints.

=cut

has 'id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< integrations >>

A list of integrations to enable for this fine-tuning job.

=cut

has 'integrations' => (
    is       => 'ro',
    isa      => ArrayRef[],
);

=head2 C<< model >>

The base model that is being fine-tuned.

=cut

has 'model' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< object >>

The object type, which is always "fine_tuning.job".

=cut

has 'object' => (
    is       => 'ro',
    isa      => Enum[
        "fine_tuning.job",
    ],
    required => 1,
);

=head2 C<< organization_id >>

The organization that owns the fine-tuning job.

=cut

has 'organization_id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< result_files >>

The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).

=cut

has 'result_files' => (
    is       => 'ro',
    isa      => ArrayRef[Str],
    required => 1,
);

=head2 C<< seed >>

The seed used for the fine-tuning job.

=cut

has 'seed' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< status >>

The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.

=cut

has 'status' => (
    is       => 'ro',
    isa      => Enum[
        "validating_files",
        "queued",
        "running",
        "succeeded",
        "failed",
        "cancelled",
    ],
    required => 1,
);

=head2 C<< trained_tokens >>

The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.

=cut

has 'trained_tokens' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< training_file >>

The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).

=cut

has 'training_file' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< validation_file >>

The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).

=cut

has 'validation_file' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);


1;
