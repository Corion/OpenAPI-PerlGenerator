package AI::OpenAI::TranscriptionSegment 0.01;
# DO NOT EDIT! This is an autogenerated file.

use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

=encoding utf8

=head1 NAME

AI::OpenAI::TranscriptionSegment -

=head1 SYNOPSIS

  my $obj = AI::OpenAI::TranscriptionSegment->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< avg_logprob >>

Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.

=cut

has 'avg_logprob' => (
    is       => 'ro',
    isa      => Num,
    required => 1,
);

=head2 C<< compression_ratio >>

Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.

=cut

has 'compression_ratio' => (
    is       => 'ro',
    isa      => Num,
    required => 1,
);

=head2 C<< end >>

End time of the segment in seconds.

=cut

has 'end' => (
    is       => 'ro',
    isa      => Num,
    required => 1,
);

=head2 C<< id >>

Unique identifier of the segment.

=cut

has 'id' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< no_speech_prob >>

Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.

=cut

has 'no_speech_prob' => (
    is       => 'ro',
    isa      => Num,
    required => 1,
);

=head2 C<< seek >>

Seek offset of the segment.

=cut

has 'seek' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< start >>

Start time of the segment in seconds.

=cut

has 'start' => (
    is       => 'ro',
    isa      => Num,
    required => 1,
);

=head2 C<< temperature >>

Temperature parameter used for generating the segment.

=cut

has 'temperature' => (
    is       => 'ro',
    isa      => Num,
    required => 1,
);

=head2 C<< text >>

Text content of the segment.

=cut

has 'text' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< tokens >>

Array of token IDs for the text content.

=cut

has 'tokens' => (
    is       => 'ro',
    isa      => ArrayRef[Int],
    required => 1,
);


1;
