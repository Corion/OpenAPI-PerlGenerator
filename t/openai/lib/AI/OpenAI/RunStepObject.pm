package AI::OpenAI::RunStepObject 0.01;
# DO NOT EDIT! This is an autogenerated file.

use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

use namespace::clean;

=encoding utf8

=head1 NAME

AI::OpenAI::RunStepObject -

=head1 SYNOPSIS

  my $obj = AI::OpenAI::RunStepObject->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< assistant_id >>

The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.

=cut

has 'assistant_id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< cancelled_at >>

The Unix timestamp (in seconds) for when the run step was cancelled.

=cut

has 'cancelled_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< completed_at >>

The Unix timestamp (in seconds) for when the run step completed.

=cut

has 'completed_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< created_at >>

The Unix timestamp (in seconds) for when the run step was created.

=cut

has 'created_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< expired_at >>

The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.

=cut

has 'expired_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< failed_at >>

The Unix timestamp (in seconds) for when the run step failed.

=cut

has 'failed_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< id >>

The identifier of the run step, which can be referenced in API endpoints.

=cut

has 'id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< last_error >>

The last error associated with this run step. Will be `null` if there are no errors.

=cut

has 'last_error' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< metadata >>

Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.

=cut

has 'metadata' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< object >>

The object type, which is always `thread.run.step`.

=cut

has 'object' => (
    is       => 'ro',
    isa      => Enum[
        "thread.run.step",
    ],
    required => 1,
);

=head2 C<< run_id >>

The ID of the [run](/docs/api-reference/runs) that this run step is a part of.

=cut

has 'run_id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< status >>

The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.

=cut

has 'status' => (
    is       => 'ro',
    isa      => Enum[
        "in_progress",
        "cancelled",
        "failed",
        "completed",
        "expired",
    ],
    required => 1,
);

=head2 C<< step_details >>

The details of the run step.

=cut

has 'step_details' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);

=head2 C<< thread_id >>

The ID of the [thread](/docs/api-reference/threads) that was run.

=cut

has 'thread_id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< type >>

The type of run step, which can be either `message_creation` or `tool_calls`.

=cut

has 'type' => (
    is       => 'ro',
    isa      => Enum[
        "message_creation",
        "tool_calls",
    ],
    required => 1,
);

=head2 C<< usage >>

Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.

=cut

has 'usage' => (
    is       => 'ro',
    isa      => HashRef,
    required => 1,
);


1;
