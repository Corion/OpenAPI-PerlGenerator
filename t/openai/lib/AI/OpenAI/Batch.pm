package AI::OpenAI::Batch 0.01;
# DO NOT EDIT! This is an autogenerated file.
use 5.020;
use Moo 2;
use experimental 'signatures';
use stable 'postderef';
use Types::Standard qw(Enum Str Bool Num Int HashRef ArrayRef);
use MooX::TypeTiny;

=head1 NAME

AI::OpenAI::Batch -

=head1 SYNOPSIS

  my $obj = AI::OpenAI::Batch->new();
  ...

=cut

sub as_hash( $self ) {
    return { $self->%* }
}

=head1 PROPERTIES

=head2 C<< cancelled_at >>

The Unix timestamp (in seconds) for when the batch was cancelled.

=cut

has 'cancelled_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< cancelling_at >>

The Unix timestamp (in seconds) for when the batch started cancelling.

=cut

has 'cancelling_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< completed_at >>

The Unix timestamp (in seconds) for when the batch was completed.

=cut

has 'completed_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< completion_window >>

The time frame within which the batch should be processed.

=cut

has 'completion_window' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< created_at >>

The Unix timestamp (in seconds) for when the batch was created.

=cut

has 'created_at' => (
    is       => 'ro',
    isa      => Int,
    required => 1,
);

=head2 C<< endpoint >>

The OpenAI API endpoint used by the batch.

=cut

has 'endpoint' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< error_file_id >>

The ID of the file containing the outputs of requests with errors.

=cut

has 'error_file_id' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< errors >>

=cut

has 'errors' => (
    is       => 'ro',
    isa      => HashRef,
);

=head2 C<< expired_at >>

The Unix timestamp (in seconds) for when the batch expired.

=cut

has 'expired_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< expires_at >>

The Unix timestamp (in seconds) for when the batch will expire.

=cut

has 'expires_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< failed_at >>

The Unix timestamp (in seconds) for when the batch failed.

=cut

has 'failed_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< finalizing_at >>

The Unix timestamp (in seconds) for when the batch started finalizing.

=cut

has 'finalizing_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< id >>

=cut

has 'id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< in_progress_at >>

The Unix timestamp (in seconds) for when the batch started processing.

=cut

has 'in_progress_at' => (
    is       => 'ro',
    isa      => Int,
);

=head2 C<< input_file_id >>

The ID of the input file for the batch.

=cut

has 'input_file_id' => (
    is       => 'ro',
    isa      => Str,
    required => 1,
);

=head2 C<< metadata >>

Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.

=cut

has 'metadata' => (
    is       => 'ro',
    isa      => HashRef,
);

=head2 C<< object >>

The object type, which is always `batch`.

=cut

has 'object' => (
    is       => 'ro',
    isa      => Enum[
        "batch",
    ],
    required => 1,
);

=head2 C<< output_file_id >>

The ID of the file containing the outputs of successfully executed requests.

=cut

has 'output_file_id' => (
    is       => 'ro',
    isa      => Str,
);

=head2 C<< request_counts >>

The request counts for different statuses within the batch.

=cut

has 'request_counts' => (
    is       => 'ro',
    isa      => HashRef,
);

=head2 C<< status >>

The current status of the batch.

=cut

has 'status' => (
    is       => 'ro',
    isa      => Enum[
        "validating",
        "failed",
        "in_progress",
        "finalizing",
        "completed",
        "expired",
        "cancelling",
        "cancelled",
    ],
    required => 1,
);


1;
